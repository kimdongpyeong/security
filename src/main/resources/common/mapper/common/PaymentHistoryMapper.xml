<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.supporti.api.common.mapper.PaymentHistoryMapper">

    <sql id="selectFrom">
        SELECT
           `payment_history`.`id`,
           `payment_history`.`request_lecturer_id`,
           `user`.`name` AS `request_lecturer_nm`,
           `payment_history`.`name`,
           `payment_history`.`phone_num`,
           `payment_history`.`payment_target_cd`,
           (SELECT name FROM `tb_code` `code` WHERE `code`.`value` = `payment_history`.`payment_target_cd` AND `code`.`parent_id` = 107) AS `payment_target_nm`,
           `payment_history`.`amount`,
           `payment_history`.`payment_type`,
           `payment_history`.`order_id`,
           `payment_history`.`request_date`,
           `payment_history`.`payment_user_id`,
           `payment_user`.`name` AS `payment_user_nm`,
           `payment_history`.`payment_method_cd`,
           (SELECT name FROM `tb_code` `code` WHERE `code`.`value` = `payment_history`.`payment_method_cd` AND `code`.`parent_id` = 108) AS `payment_method_nm`,
           `payment_history`.`payment_date`,
           `payment_history`.`last_payment_date`,
           DATE_FORMAT(`payment_history`.`payment_date`, '%Y-%m-%d') AS `payment_date_day`,
           `payment_history`.`payment_general`,
           `payment_history`.`payment_div`,
           `payment_history`.`kakao_tid`,
           `payment_history`.`kakao_aid`,
           `payment_history`.`kakao_sid`,
           `payment_history`.`toss_payment_key`,
           `payment_history`.`state`,
           `payment_history`.`cancel_request_date`,
           `payment_history`.`cancel_reason`,
           `payment_history`.`cancel_approval_date`,
           `payment_history`.`refund_date`,
           `payment_history`.`refund_process_id`,
           (SELECT `name` FROM `tb_user` `refund_user` WHERE `payment_history`.`refund_process_id` = `refund_user`.`id`) AS `refund_process_nm`,
           `payment_history`.`refund_reject_desc`,
           `payment_history`.`refund_user_nm`,
           `payment_history`.`refund_bank_cd`,
           (SELECT name FROM `tb_code` `code` WHERE `code`.`value` = `payment_history`.`refund_bank_cd` AND `code`.`parent_id` = 119) AS `refund_bank_nm`,
           `payment_history`.`refund_account_num`,
           `payment_history`.`created_date`,
           `payment_history`.`last_modified_date`
        FROM
            `tb_payment_history` `payment_history`
        JOIN
            `tb_user` `user`
        ON
            `payment_history`.`request_lecturer_id` = `user`.`id`
        LEFT JOIN
            `tb_user` `payment_user`
        ON
            `payment_history`.`payment_user_id` = `payment_user`.`id`
    </sql>

    <sql id="where">
        <where>
            <if test="paymentHistoryParamDto.requestLecturerId != null and paymentHistoryParamDto.requestLecturerId != ''">
                AND `payment_history`.`request_lecturer_id` = #{paymentHistoryParamDto.requestLecturerId}
            </if>
            <if test="paymentHistoryParamDto.state != null and paymentHistoryParamDto.state != ''">
                AND `payment_history`.`state` = #{paymentHistoryParamDto.state}
            </if>
            <if test="paymentHistoryParamDto.multiState != null">
                AND `payment_history`.`state` IN
                <foreach collection="paymentHistoryParamDto.multiState" item="item" index="index" separator="," open="(" close=")">
                    #{item}
                </foreach>
            </if>
            <if test="paymentHistoryParamDto.paymentGeneral != null and paymentHistoryParamDto.paymentGeneral != ''">
                AND `payment_history`.`payment_general` = #{paymentHistoryParamDto.paymentGeneral}
            </if>
            <if test="paymentHistoryParamDto.paymentType != null and paymentHistoryParamDto.paymentType != ''">
                AND `payment_history`.`payment_type` = #{paymentHistoryParamDto.paymentType}
            </if>
            <if test="paymentHistoryParamDto.paymentDiv != null and paymentHistoryParamDto.paymentDiv != ''">
                AND `payment_history`.`payment_div` = #{paymentHistoryParamDto.paymentDiv}
            </if>
            <if test="paymentHistoryParamDto.searchStartDay != null">
                <![CDATA[
                    AND request_date >= #{paymentHistoryParamDto.searchStartDay}
                ]]>
            </if>
            <if test="paymentHistoryParamDto.searchEndDay != null">
                <![CDATA[
                    AND request_date < #{paymentHistoryParamDto.searchEndDay}
                ]]>
            </if>
            <if test="paymentHistoryParamDto.searchLastDay != null and paymentHistoryParamDto.searchLastDay != ''">
                AND DATE_FORMAT(`payment_history`.`payment_date`, '%Y-%m-%d') != DATE_FORMAT(NOW(), '%Y-%m-%d')
                AND DAY(`payment_history`.`payment_date`) &gt;= #{paymentHistoryParamDto.searchLastDay}
            </if>
            <if test="paymentHistoryParamDto.searchDay != null and paymentHistoryParamDto.searchDay != ''">
                AND DATE_FORMAT(`payment_history`.`payment_date`, '%Y-%m-%d') != DATE_FORMAT(NOW(), '%Y-%m-%d')
                AND DAY(`payment_history`.`payment_date`) = #{paymentHistoryParamDto.searchDay}
            </if>
        </where>
    </sql>

    <resultMap id="paymentHistoryResultMap" type="kr.supporti.api.common.entity.PaymentHistoryEntity">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="phoneNum" column="phone_num"/>
        <result property="paymentTargetCd" column="payment_target_cd"/>
        <result property="paymentTargetNm" column="payment_target_nm"/>
        <result property="amount" column="amount"/>
        <result property="paymentType" column="payment_type"/>
        <result property="orderId" column="order_id"/>
        <result property="requestDate" column="request_date"/>
        <result property="requestLecturerId" column="request_lecturer_id"/>
        <result property="requestLecturerNm" column="request_lecturer_nm"/>
        <result property="paymentUserId" column="payment_user_id"/>
        <result property="paymentUserNm" column="payment_user_nm"/>
        <result property="paymentMethodCd" column="payment_method_cd"/>
        <result property="paymentMethodNm" column="payment_method_nm"/>
        <result property="paymentDate" column="payment_date"/>
        <result property="lastPaymentDate" column="last_payment_date"/>
        <result property="paymentDateDay" column="payment_date_day"/>
        <result property="paymentGeneral" column="payment_general"/>
        <result property="paymentDiv" column="payment_div"/>
        <result property="kakaoTid" column="kakao_tid"/>
        <result property="kakaoAid" column="kakao_aid"/>
        <result property="kakaoSid" column="kakao_sid"/>
        <result property="tossPaymentKey" column="toss_payment_key"/>
        <result property="state" column="state"/>
        <result property="cancelRequestDate" column="cancel_request_date"/>
        <result property="cancelReason" column="cancel_reason"/>
        <result property="cancelApprovalDate" column="cancel_approval_date"/>
        <result property="refundDate" column="refund_date"/>
        <result property="refundProcessId" column="refund_process_id"/>
        <result property="refundProcessNm" column="refund_process_nm"/>
        <result property="refundRejectDesc" column="refund_reject_desc"/>
        <result property="refundAccountNum" column="refund_account_num"/>
        <result property="refundUserNm" column="refund_user_nm"/>
        <result property="refundBankCd" column="refund_bank_cd"/>
        <result property="refundBankNm" column="refund_bank_nm"/>
        <result property="createdDate" column="created_date"/>
        <result property="lastModifiedDate" column="last_modified_date"/>
    </resultMap>

    <select
        id="selectPaymentHistoryList"
        parameterType="java.util.Map"
        resultMap="paymentHistoryResultMap"
    >
        <include refid="PageFragment.sortStart"/>
        <include refid="selectFrom"/>
        <include refid="where"/>
        <include refid="PageFragment.sortEnd"/>
        <include refid="PageFragment.limitOffset"/>
    </select>

    <select
        id="selectPaymentHistoryListCount"
        parameterType="java.util.Map"
        resultType="java.lang.Integer"
    >
        <include refid="PageFragment.countStart"/>
        <include refid="selectFrom"/>
        <include refid="where"/>
        <include refid="PageFragment.countEnd"/>
    </select>

    <select
        id="selectPaymentHistory"
        parameterType="java.util.Map"
        resultMap="paymentHistoryResultMap"
    >
        <include refid="selectFrom"/>
        WHERE
            `payment_history`.`id` = #{id}
    </select>

    <select
        id="selectPaymentHistoryByOrderId"
        parameterType="java.util.Map"
        resultMap="paymentHistoryResultMap"
    >
        <include refid="selectFrom"/>
        WHERE
            `payment_history`.`order_id` = #{orderId}
    </select>

    <update
        id="updatePaymentHistory"
        parameterType="java.util.Map">
        UPDATE `tb_payment_history` `payment_history`
        <set>
            <if test="paymentHistoryDto.paymentUserId != null and paymentHistoryDto.paymentUserId != ''">
                `payment_history`.`payment_user_id` = #{paymentHistoryDto.paymentUserId},
            </if>
            <if test="paymentHistoryDto.kakaoTid != null and paymentHistoryDto.kakaoTid != ''">
                `payment_history`.`kakao_tid` = #{paymentHistoryDto.kakaoTid},
            </if>
            <if test="paymentHistoryDto.kakaoAid != null and paymentHistoryDto.kakaoAid != ''">
                `payment_history`.`kakao_aid` = #{paymentHistoryDto.kakaoAid},
            </if>
            <if test="paymentHistoryDto.kakaoSid != null and paymentHistoryDto.kakaoSid != ''">
                `payment_history`.`kakao_sid` = #{paymentHistoryDto.kakaoSid},
            </if>
            <if test='paymentHistoryDto.state != null and paymentHistoryDto.state == "S"'>
                `payment_history`.`state` = #{paymentHistoryDto.state},
                `payment_history`.`payment_date` = now(),
                `payment_history`.`last_payment_date` = now(),
            </if>
            <if test='paymentHistoryDto.state != null and paymentHistoryDto.state == "C"'>
                `payment_history`.`state` = #{paymentHistoryDto.state},
                `payment_history`.`cancel_request_date` = now(),
            </if>
            <if test='paymentHistoryDto.state != null and paymentHistoryDto.state == "CY"'>
                `payment_history`.`state` = #{paymentHistoryDto.state},
                `payment_history`.`cancel_approval_date` = now(),
            </if>
            <if test='paymentHistoryDto.state != null and paymentHistoryDto.state == "R"'>
                `payment_history`.`state` = #{paymentHistoryDto.state},
                `payment_history`.`refund_date` = now(),
                `payment_history`.`refund_process_id` = #{paymentHistoryDto.refundProcessId},
            </if>
            <if test="paymentHistoryDto.paymentMethodCd != null and paymentHistoryDto.paymentMethodCd != ''">
                `payment_history`.`payment_method_cd` = #{paymentHistoryDto.paymentMethodCd},
            </if>
            <if test="paymentHistoryDto.paymentGeneral != null and paymentHistoryDto.paymentGeneral != ''">
                `payment_history`.`payment_general` = #{paymentHistoryDto.paymentGeneral},
            </if>
            <if test="paymentHistoryDto.tossPaymentKey != null and paymentHistoryDto.tossPaymentKey != ''">
                `payment_history`.`toss_payment_key` = #{paymentHistoryDto.tossPaymentKey},
            </if>
            <if test="paymentHistoryDto.paymentDiv != null and paymentHistoryDto.paymentDiv != ''">
                `payment_history`.`payment_div` = #{paymentHistoryDto.paymentDiv},
            </if>
            <if test="paymentHistoryDto.regularPaymentYn != null and paymentHistoryDto.regularPaymentYn != ''">
                `payment_history`.`regular_payment_yn` = #{paymentHistoryDto.regularPaymentYn},
                <if test='paymentHistoryDto.regularPaymentYn == "Y"'>
                `payment_history`.`last_payment_date` = now(),
                </if>
            </if>
            <if test="paymentHistoryDto.regularPaymentFailDesc != null and paymentHistoryDto.regularPaymentFailDesc != ''">
                `payment_history`.`regular_payment_fail_desc` = #{paymentHistoryDto.regularPaymentFailDesc},
            </if>
        </set>
        WHERE
            `payment_history`.`id` = #{id}
    </update>

</mapper>